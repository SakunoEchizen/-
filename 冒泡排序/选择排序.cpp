#include"func.h"

//首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。 


//初始状态：无序区为R[1..n]，有序区为空；
//第i趟排序(i = 1, 2, 3…n - 1)开始时，当前有序区和无序区分别为R[1..i - 1]和R(i..n）。该趟排序从当前无序区中 - 选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1..i]和R[i + 1..n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；n - 1趟结束，数组有序化了。

int* Selection_Sort(int* a, int len)
{
	int min_index;
	int temp;
	for (int i = 0; i < len-1 ; i++)
	{
		min_index = i;
		
		for (int j = i+1; j < len ; j++)
		{
			if (a[min_index] > a[j])
			{
				min_index = j;
			}
		}
		temp = a[i];
		a[i] = a[min_index];
		a[min_index] = temp;

		
	}
	return a;
}

//表现最稳定的排序算法之一，因为无论什么数据进去都是O(n2)的时间复杂度，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧